0. Laravel framework architecture for DDD and Hexagonal

[ v2 ] Project Notifier Publisher/Subscriber

Domains - Application - Infraestructure

We need to add scaffolding that decouples business rules from framework details. It allows to change persistence, test domain logic easily, and avoid leaking DB models into domain or DTOs into controllers.

In DDD you usually see something like this under a domain :

Domain/
 â””â”€â”€ Publisher/
      â”œâ”€â”€ Entities/        // Aggregate roots, entities, value objects
      â”œâ”€â”€ Events/          // Domain events
      â”œâ”€â”€ Repositories/    // Interfaces for persistence (ports)
      â”œâ”€â”€ Services/        // Domain services (pure business logic)
      â””â”€â”€ Ports/           // (Optional) interfaces to external systems like buses/notifications

Repositories

Ports

Some teams put

ðŸ‘‰ Best practice:

If the project is small â†’ keep it simple (

For our project, a clean DDD-style foldering could look like this:

app/
  Domain/
    Publisher/
      Entities/
        Publisher.php
      Events/
        EventPublished.php
      Services/
        PublishService.php
    Subscriber/
      Entities/
        Subscriber.php
      Events/
        EventReceived.php
      Services/
        SubscribeService.php
    Shared/
      ValueObjects/
        EventId.php
        Payload.php
  Application/
    Publisher/
      PublishEvent/
        PublishEventHandler.php    # orchestrates publishing
    Subscriber/
      HandleEvent/
        HandleEventHandler.php     # orchestrates subscriber handling
  Infrastructure/
    Messaging/
      Adapters/
        RedisPublisher.php
        RedisSubscriber.php
        KafkaPublisher.php
        KafkaSubscriber.php

Recommended add-on structure for scalability and broadening scope

Since we want scalability + future scope, weâ€™ll scaffold with

Hereâ€™s the

app/
 â”œâ”€â”€ Domain/                        # Core business rules, pure PHP, no Laravel deps
 â”‚    â”œâ”€â”€ Publisher/
 â”‚    â”‚    â”œâ”€â”€ Entities/            # Aggregate roots, value objects
 â”‚    â”‚    â”œâ”€â”€ Events/              # Domain events (e.g. MessagePublished)
 â”‚    â”‚    â”œâ”€â”€ Repositories/        # Persistence contracts (PublisherRepositoryInterface)
 â”‚    â”‚    â”œâ”€â”€ Services/            # Business services (pure logic)
 â”‚    â”‚    â””â”€â”€ Ports/               # External system contracts (EventBus, Broker)
 â”‚    â”‚
 â”‚    â””â”€â”€ Subscriber/
 â”‚         â”œâ”€â”€ Entities/
 â”‚         â”œâ”€â”€ Events/
 â”‚         â”œâ”€â”€ Repositories/
 â”‚         â”œâ”€â”€ Services/
 â”‚         â””â”€â”€ Ports/               # e.g. SubscriberNotificationInterface
 â”‚
 â”œâ”€â”€ Application/                   # Use cases (application services)
 â”‚    â”œâ”€â”€ Publisher/
 â”‚    â”‚    â””â”€â”€ Commands/            # e.g. PublishMessageHandler
 â”‚    â””â”€â”€ Subscriber/
 â”‚         â””â”€â”€ Commands/            # e.g. SubscribeToTopicHandler
 â”‚
 â”œâ”€â”€ Infrastructure/                # Adapters to external systems
 â”‚    â”œâ”€â”€ Persistence/
 â”‚    â”‚    â”œâ”€â”€ MySQL/
 â”‚    â”‚    â”‚    â”œâ”€â”€ PublisherRepository.php
 â”‚    â”‚    â”‚    â””â”€â”€ SubscriberRepository.php
 â”‚    â”‚    â””â”€â”€ Migrations/          # optional, can stay in database/migrations
 â”‚    â”‚
 â”‚    â”œâ”€â”€ MessageBroker/
 â”‚    â”‚    â”œâ”€â”€ RabbitMQPublisherEventBus.php
 â”‚    â”‚    â”œâ”€â”€ RedisPublisherEventBus.php
 â”‚    â”‚    â””â”€â”€ ...
 â”‚    â”‚
 â”‚    â””â”€â”€ Notifications/
 â”‚         â””â”€â”€ WebSocketSubscriberNotification.php
 â”‚
 â””â”€â”€ Http/                          # Stays as usual in Laravel
      â”œâ”€â”€ Controllers/
      â”œâ”€â”€ Requests/
      â””â”€â”€ Resources/

Reasoning

Domain/

Application/

Infrastructure/

Http/

This way:

You can switch MySQL â†’ Mongo or RabbitMQ â†’ Redis without touching

Application

Infrastructure